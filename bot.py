import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —Ü–∏–º ID
ALLOWED_USERS = [84807467, 163952863]

# –î–∞–Ω—ñ –±–æ—Ç–∞
user_data = {'limit': 0, 'dad_spent': 0, 'mom_spent': 0}
DAD_ID = 84807467
MOM_ID = 163952863
keyboard = [["‚ûñ –í–∏—Ç—Ä–∞—Ç–∏"], ["üéØ –õ—ñ–º—ñ—Ç", "üí∞ –ë–∞–ª–∞–Ω—Å"]]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
async def check_access(update: Update):
    user = update.message.from_user
    if user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤–∞—à —Ä–æ–¥–∏–Ω–Ω–∏–π –±–æ—Ç. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    text = update.message.text
    if text == "‚ûñ –í–∏—Ç—Ä–∞—Ç–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
        context.user_data['action'] = 'spend'
    elif text == "üéØ –õ—ñ–º—ñ—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏ –ª—ñ–º—ñ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å:")
        context.user_data['action'] = 'limit'
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        dad, mom, limit = user_data['dad_spent'], user_data['mom_spent'], user_data['limit']
        balance = limit - dad - mom
        await update.message.reply_text(
            f"üéØ –õ—ñ–º—ñ—Ç: {limit} –≥—Ä–Ω\n"
            f"üßî‚Äç‚ôÇÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–ø–∞–ø–∞: {dad} –≥—Ä–Ω\n"
            f"üë©‚Äçüçº –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–º–∞–º–∞: {mom} –≥—Ä–Ω\n"
            f"üíö –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω"
        )

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É.")
        return

    user = update.message.from_user
    action = context.user_data.get('action')
    if action == 'limit':
        user_data['limit'] = amount
        await update.message.reply_text(f"üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª—ñ–º—ñ—Ç: {amount} –≥—Ä–Ω")
    elif action == 'spend':
        if user.id == DAD_ID:
            user_data['dad_spent'] += amount
            await update.message.reply_text(f"‚ûñ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω (–°—É–ø–µ—Ä–ø–∞–ø–∞)")
        elif user.id == MOM_ID:
            user_data['mom_spent'] += amount
            await update.message.reply_text(f"‚ûñ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω (–°—É–ø–µ—Ä–º–∞–º–∞)")
    context.user_data['action'] = None

# === –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^[^\d]+$"), handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\d+(\.\d+)?$"), handle_numbers))

    # Webhook
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path="",
        webhook_url=webhook_url
    )
