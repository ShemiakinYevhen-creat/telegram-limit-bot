import os
import threading
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —Ü–∏–º ID
ALLOWED_USERS = [84807467, 163952863]

# –î–∞–Ω—ñ –±–æ—Ç–∞
user_data = {'limit': 0, 'dad_spent': 0, 'mom_spent': 0}
DAD_ID = 84807467
MOM_ID = 163952863
keyboard = [["‚ûñ –í–∏—Ç—Ä–∞—Ç–∏"], ["üéØ –õ—ñ–º—ñ—Ç", "üí∞ –ë–∞–ª–∞–Ω—Å"]]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Flask –≤–µ–±—Å–µ—Ä–≤–µ—Ä
app_flask = Flask(__name__)
telegram_app = None  # –°—é–¥–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–¥–æ–¥–∞—Ç–æ–∫

@app_flask.route("/")
def home():
    return "Bot is running!"

@app_flask.route("/webhook", methods=["POST"])
def webhook():
    if telegram_app:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        telegram_app.update_queue.put(update)
    return "OK"

def run_flask():
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
async def check_access(update: Update):
    user = update.message.from_user
    if user.id not in ALLOWED_USERS:
        print(f"[ACCESS DENIED] {user.first_name} ({user.id}) tried to use the bot.")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return False
    return True

# Telegram —Ö–µ–Ω–¥–ª–µ—Ä–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤–∞—à —Ä–æ–¥–∏–Ω–Ω–∏–π –±–æ—Ç. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    text = update.message.text
    if text == "‚ûñ –í–∏—Ç—Ä–∞—Ç–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
        context.user_data['action'] = 'spend'
    elif text == "üéØ –õ—ñ–º—ñ—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏ –ª—ñ–º—ñ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å:")
        context.user_data['action'] = 'limit'
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        dad = user_data['dad_spent']
        mom = user_data['mom_spent']
        limit = user_data['limit']
        balance = limit - dad - mom
        await update.message.reply_text(
            f"üéØ –õ—ñ–º—ñ—Ç: {limit} –≥—Ä–Ω\n"
            f"üßî‚Äç‚ôÇÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–ø–∞–ø–∞: {dad} –≥—Ä–Ω\n"
            f"üë©‚Äçüçº –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–º–∞–º–∞: {mom} –≥—Ä–Ω\n"
            f"üíö –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω"
        )

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    text = update.message.text
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É.")
        return

    user = update.message.from_user
    action = context.user_data.get('action')

    if action == 'limit':
        user_data['limit'] = amount
        print(f"[LIMIT] {user.first_name} ({user.id}) set limit to {amount} –≥—Ä–Ω.")
        await update.message.reply_text(f"üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª—ñ–º—ñ—Ç: {amount} –≥—Ä–Ω")
    elif action == 'spend':
        if user.id == DAD_ID:
            user_data['dad_spent'] += amount
            print(f"[EXPENSE] –°—É–ø–µ—Ä–ø–∞–ø–∞ –¥–æ–¥–∞–≤ {amount} –≥—Ä–Ω. –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ü–∞–ø–∏: {user_data['dad_spent']}")
            await update.message.reply_text(f"‚ûñ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω (–°—É–ø–µ—Ä–ø–∞–ø–∞)")
        elif user.id == MOM_ID:
            user_data['mom_spent'] += amount
            print(f"[EXPENSE] –°—É–ø–µ—Ä–º–∞–º–∞ –¥–æ–¥–∞–ª–∞ {amount} –≥—Ä–Ω. –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ú–∞–º–∏: {user_data['mom_spent']}")
            await update.message.reply_text(f"‚ûñ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω (–°—É–ø–µ—Ä–º–∞–º–∞)")
    context.user_data['action'] = None

def run_telegram():
    global telegram_app
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN is not set.")
    telegram_app = ApplicationBuilder().token(token).build()
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^[^\d]+$"), handle_buttons))
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\d+(\.\d+)?$"), handle_numbers))

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    telegram_app.bot.set_webhook(webhook_url)
    telegram_app.run_async()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    run_telegram()
