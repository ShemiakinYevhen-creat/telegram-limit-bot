import json
import os
import threading
import time
from datetime import datetime
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

TOKEN = os.getenv("TELEGRAM_TOKEN")
DATA_FILE = "data.json"
PING_URL = os.getenv("PING_URL", "https://telegram-limit-bot.onrender.com")

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö =====
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"limit": 40000, "balance": 40000, "expenses": [], "incomes": [], "archive": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# ===== –ö–Ω–æ–ø–∫–∏ =====
MAIN_MENU = ReplyKeyboardMarkup(
    [["–í–∏—Ç—Ä–∞—Ç–∏", "–î–æ—Ö—ñ–¥"], ["–ó–≤—ñ—Ç", "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"]],
    resize_keyboard=True
)

# ===== –õ–æ–≥—ñ–∫–∞ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ —Å—É–º—É –∞–±–æ –æ–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=MAIN_MENU)

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
    return 1

async def save_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        data["expenses"].append({"amount": amount, "date": str(datetime.now())})
        data["balance"] -= amount
        save_data(data)
        await update.message.reply_text(f"–î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω\n–ë–∞–ª–∞–Ω—Å: {data['balance']} –≥—Ä–Ω", reply_markup=MAIN_MENU)
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return ConversationHandler.END

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É:")
    return 2

async def save_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        data["incomes"].append({"amount": amount, "date": str(datetime.now())})
        save_data(data)
        await update.message.reply_text(f"–î–æ–¥–∞–Ω–æ –¥–æ—Ö—ñ–¥: {amount} –≥—Ä–Ω", reply_markup=MAIN_MENU)
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return ConversationHandler.END

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_exp = sum(x["amount"] for x in data["expenses"])
    total_inc = sum(x["amount"] for x in data["incomes"])
    await update.message.reply_text(
        f"üìä –ó–≤—ñ—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:\n"
        f"–î–æ—Ö—ñ–¥: {total_inc} –≥—Ä–Ω\n"
        f"–í–∏—Ç—Ä–∞—Ç–∏: {total_exp} –≥—Ä–Ω\n"
        f"–ë–∞–ª–∞–Ω—Å: {data['balance']} –≥—Ä–Ω",
        reply_markup=MAIN_MENU
    )

async def delete_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if data["expenses"]:
        last = data["expenses"].pop()
        data["balance"] += last["amount"]
        save_data(data)
        await update.message.reply_text(f"–í–∏–¥–∞–ª–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É {last['amount']} –≥—Ä–Ω.\n–ë–∞–ª–∞–Ω—Å: {data['balance']} –≥—Ä–Ω", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=MAIN_MENU)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# ===== –ü—ñ–Ω–≥ Render =====
def ping():
    import requests
    while True:
        try:
            requests.get(PING_URL)
        except:
            pass
        time.sleep(300)  # –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω

# ===== Flask –¥–ª—è –≤–µ–±—Ö—É–∫–∞ =====
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running!"

if __name__ == "__main__":
    threading.Thread(target=ping, daemon=True).start()

    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–í–∏—Ç—Ä–∞—Ç–∏$"), add_expense),
            MessageHandler(filters.Regex("^–î–æ—Ö—ñ–¥$"), add_income)
        ],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_expense)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_income)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–ó–≤—ñ—Ç$"), report))
    application.add_handler(MessageHandler(filters.Regex("^–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É$"), delete_last))
    application.add_handler(conv_handler)

    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"{PING_URL}/{TOKEN}"
    )
