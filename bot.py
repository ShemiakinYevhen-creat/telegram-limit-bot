import os
import json
import asyncio
import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

DATA_FILE = "data.json"
BASE_LIMIT = 40000  # –ë–∞–∑–æ–≤–∏–π –ª—ñ–º—ñ—Ç —â–æ–º—ñ—Å—è—Ü—è
ALLOWED_USERS = [84807467, 163952863]
DAD_ID = 84807467
MOM_ID = 163952863

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
user_data = {
    'limit': BASE_LIMIT,
    'dad_spent': 0,
    'mom_spent': 0,
    'carry_over': 0,
    'month': datetime.datetime.now().month,
    'history': {"dad": [], "mom": []},
    'archive': {}
}

def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            user_data.update(json.load(f))

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(user_data, f)

# –ú–µ–Ω—é
keyboard = [["‚ûñ –í–∏—Ç—Ä–∞—Ç–∏", "‚Ü©Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"], ["üéØ –õ—ñ–º—ñ—Ç", "üí∞ –ë–∞–ª–∞–Ω—Å"], ["üìä –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å", "üìö –ê—Ä—Ö—ñ–≤ –º—ñ—Å—è—Ü—ñ–≤"]]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def check_access(update: Update):
    if update.message.from_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return False
    return True

# –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É 1-–≥–æ —á–∏—Å–ª–∞
def check_new_month():
    now = datetime.datetime.now()
    if now.month != user_data['month']:
        total_spent = user_data['dad_spent'] + user_data['mom_spent']
        carry = user_data['limit'] - total_spent
        new_limit = BASE_LIMIT + carry
        # –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –º—ñ—Å—è—Ü—è
        user_data['archive'][f"{user_data['month']}-{now.year}"] = {
            "limit": user_data['limit'],
            "dad_spent": user_data['dad_spent'],
            "mom_spent": user_data['mom_spent'],
            "carry": carry
        }
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        user_data['limit'] = new_limit
        user_data['dad_spent'] = 0
        user_data['mom_spent'] = 0
        user_data['history'] = {"dad": [], "mom": []}
        user_data['month'] = now.month
        save_data()
        return carry, new_limit
    return None, None

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    carry, new_limit = check_new_month()
    if carry is not None:
        sign = "+" if carry >= 0 else "-"
        await update.message.reply_text(
            f"–ù–æ–≤–∏–π –º—ñ—Å—è—Ü—å!\n–ë–∞–∑–æ–≤–∏–π –ª—ñ–º—ñ—Ç: {BASE_LIMIT} –≥—Ä–Ω\n–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ –º–∏–Ω—É–ª–æ–≥–æ: {sign}{abs(carry)} –≥—Ä–Ω\n–ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç: {new_limit} –≥—Ä–Ω"
        )
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    text = update.message.text
    if text == "‚ûñ –í–∏—Ç—Ä–∞—Ç–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
        context.user_data['action'] = 'spend'
    elif text == "‚Ü©Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É":
        user = update.message.from_user
        key = "dad" if user.id == DAD_ID else "mom"
        if user_data['history'][key]:
            last = user_data['history'][key].pop()
            if key == "dad":
                user_data['dad_spent'] -= last
            else:
                user_data['mom_spent'] -= last
            save_data()
            await update.message.reply_text(f"–û—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É {last} –≥—Ä–Ω –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
    elif text == "üéØ –õ—ñ–º—ñ—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –ª—ñ–º—ñ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å:")
        context.user_data['action'] = 'limit'
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        dad, mom, limit = user_data['dad_spent'], user_data['mom_spent'], user_data['limit']
        balance = limit - dad - mom
        await update.message.reply_text(
            f"üéØ –õ—ñ–º—ñ—Ç: {limit} –≥—Ä–Ω\n"
            f"üßî‚Äç‚ôÇÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–ø–∞–ø–∞: {dad} –≥—Ä–Ω\n"
            f"üë©‚Äçüçº –í–∏—Ç—Ä–∞—Ç–∏ –°—É–ø–µ—Ä–º–∞–º–∞: {mom} –≥—Ä–Ω\n"
            f"üíö –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω"
        )
    elif text == "üìä –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å":
        month_key = f"{user_data['month']}-{datetime.datetime.now().year}"
        dad, mom, limit = user_data['dad_spent'], user_data['mom_spent'], user_data['limit']
        spent = dad + mom
        balance = limit - spent
        await update.message.reply_text(
            f"üìä –ó–≤—ñ—Ç –∑–∞ {month_key}:\n"
            f"–ë—é–¥–∂–µ—Ç: {limit} –≥—Ä–Ω\n"
            f"üßî‚Äç‚ôÇÔ∏è –°—É–ø–µ—Ä–ø–∞–ø–∞: {dad} –≥—Ä–Ω\n"
            f"üë©‚Äçüçº –°—É–ø–µ—Ä–º–∞–º–∞: {mom} –≥—Ä–Ω\n"
            f"–†–∞–∑–æ–º –≤–∏—Ç—Ä–∞—Ç–∏: {spent} –≥—Ä–Ω\n"
            f"–ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω"
        )
    elif text == "üìö –ê—Ä—Ö—ñ–≤ –º—ñ—Å—è—Ü—ñ–≤":
        if not user_data['archive']:
            await update.message.reply_text("–ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        text = "üìö –ê—Ä—Ö—ñ–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –º—ñ—Å—è—Ü—ñ–≤:\n"
        for month, data in user_data['archive'].items():
            spent = data['dad_spent'] + data['mom_spent']
            balance = data['limit'] - spent
            sign = "+" if balance >= 0 else "-"
            text += f"{month}: –õ—ñ–º—ñ—Ç {data['limit']} –≥—Ä–Ω, –í–∏—Ç—Ä–∞—Ç–∏ {spent} –≥—Ä–Ω, –ó–∞–ª–∏—à–æ–∫ {sign}{abs(balance)} –≥—Ä–Ω\n"
        await update.message.reply_text(text)

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    if not user_data['archive']:
        await update.message.reply_text("–ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    text = "üìö –ê—Ä—Ö—ñ–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –º—ñ—Å—è—Ü—ñ–≤:\n"
    for month, data in user_data['archive'].items():
        spent = data['dad_spent'] + data['mom_spent']
        balance = data['limit'] - spent
        sign = "+" if balance >= 0 else "-"
        text += f"{month}: –õ—ñ–º—ñ—Ç {data['limit']} –≥—Ä–Ω, –í–∏—Ç—Ä–∞—Ç–∏ {spent} –≥—Ä–Ω, –ó–∞–ª–∏—à–æ–∫ {sign}{abs(balance)} –≥—Ä–Ω\n"
    await update.message.reply_text(text)

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É.")
        return

    user = update.message.from_user
    action = context.user_data.get('action')
    if action == 'limit':
        user_data['limit'] = amount
        save_data()
        await update.message.reply_text(f"üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π –ª—ñ–º—ñ—Ç: {amount} –≥—Ä–Ω")
    elif action == 'spend':
        key = "dad" if user.id == DAD_ID else "mom"
        user_data['history'][key].append(amount)
        if key == "dad":
            user_data['dad_spent'] += amount
        else:
            user_data['mom_spent'] += amount
        save_data()
        await update.message.reply_text(f"‚ûñ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω")
    context.user_data['action'] = None

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    load_data()
    token = os.getenv("BOT_TOKEN")
    render_url = os.getenv("RENDER_EXTERNAL_URL")
    path = "webhook"
    webhook_url = f"{render_url}/{path}"

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^[^\d]+$"), handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\d+(\.\d+)?$"), handle_numbers))

    asyncio.get_event_loop().run_until_complete(app.bot.set_webhook(webhook_url))
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path=path,
        webhook_url=webhook_url
    )
