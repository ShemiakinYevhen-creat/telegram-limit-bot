import os
import json
import logging
from datetime import datetime
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
TOKEN = os.getenv("BOT_TOKEN")  # –î–æ–¥–∞—î—à —É Render ‚Üí Environment
USERS = [84807467, 163952863]  # –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
DATA_FILE = "data.json"
MONTHLY_LIMIT = 40000

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
app_telegram = Application.builder().token(TOKEN).build()
flask_app = Flask(__name__)

# –î–∞–Ω—ñ
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
else:
    data = {"expenses": [], "incomes": [], "balance": MONTHLY_LIMIT, "last_month": ""}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: CallbackContext):
    if update.effective_user.id not in USERS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç.\n–ö–æ–º–∞–Ω–¥–∏:\n- –î–æ–¥–∞–π —á–∏—Å–ª–æ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏\n- /–¥–æ—Ö–æ–¥ + —á–∏—Å–ª–æ\n- /–±–∞–ª–∞–Ω—Å")

async def add_expense(update: Update, context: CallbackContext):
    if update.effective_user.id not in USERS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
    try:
        amount = float(update.message.text)
        data["expenses"].append({"amount": amount, "user": update.effective_user.id, "date": datetime.now().isoformat()})
        data["balance"] -= amount
        save_data()
        await update.message.reply_text(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞: {amount} –≥—Ä–Ω\n–ë–∞–ª–∞–Ω—Å: {data['balance']} –≥—Ä–Ω")
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

async def add_income(update: Update, context: CallbackContext):
    if update.effective_user.id not in USERS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
    try:
        amount = float(context.args[0])
        data["incomes"].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        await update.message.reply_text(f"üí∞ –î–æ—Ö—ñ–¥ –¥–æ–¥–∞–Ω–æ: {amount} –≥—Ä–Ω")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /–¥–æ—Ö–æ–¥ 1000")

async def balance(update: Update, context: CallbackContext):
    if update.effective_user.id not in USERS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
    await update.message.reply_text(f"üéØ –ë–∞–ª–∞–Ω—Å: {data['balance']} –≥—Ä–Ω")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(CommandHandler("–¥–æ—Ö–æ–¥", add_income))
app_telegram.add_handler(CommandHandler("–±–∞–ª–∞–Ω—Å", balance))
app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense))

# Flask ‚Äî –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram
@flask_app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), app_telegram.bot)
    app_telegram.update_queue.put_nowait(update)
    return "ok"

@flask_app.route("/")
def index():
    return "Bot is running!"

if __name__ == "__main__":
    url = os.getenv("RENDER_EXTERNAL_URL", "https://telegram-limit-bot.onrender.com") + "/webhook"
    import asyncio
    asyncio.get_event_loop().run_until_complete(app_telegram.bot.set_webhook(url))
    flask_app.run(host="0.0.0.0", port=10000)
